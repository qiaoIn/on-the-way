#+TITLE: 为面试做好准备
#+AUTHOR: qiaoin
#+EMAIL: qiao.liubing@gmail.com
#+OPTIONS: toc:3 num:nil
#+STARTUP: showall
#+DATE: 2018-04-15 10:10:49 [start]

#+BEGIN_QUOTE
*注：* 以下有很多都是摘自网上的面经，自己也是刚开始准备面试，当然也会整理一些自己的想法和亲身经历的面试情境。
#+END_QUOTE

*主要参考的面经*

- [[https://blog.csdn.net/jiange_zh/article/details/51099066][【实习面试】阿里&腾讯offer的点点滴滴（内附干货）]]
- 
- 
- 

*#* 需要做的事情有两件：

1. 做一份好的简历；
   简历的重要性不言而喻，其作用有二：
   - 给HR看，用于评级；
   - 给面试官看，协助自己获得面试的主动权。
2. 把书读薄——提取关键的知识点，精炼出属于自己的“面试宝典”。

- 如果github上有项目，就列出来。简历能放的东西有限，当你附上自己的github时，潜在的面试官就有可能会看到你其他的作品。而且优质的代码是检验一个程序员很好的标准，如果你能在github上提交优质的代码，而刚好被面试官看到了，那么拿offer也就不难了——也许你不擅长面试交谈，但是你有代码！
- 个人技术博客。虽然不保证所有面试官都有兴趣去点开来看，但是至少又是另外一个平台，通过博客，你可以向面试官展现自己所学的所有知识，并且体现了你的分享精神
- 技术面试无疑是重头戏，而技术面试官一般都是做技术的，因此你的专业技能是他们的关注重点。在面试之前，如果面试官对你一无所知，那么他通常会问许多范围特别广的知识：linux，数据库，C++，网络，操作系统……这样子是很危险的，一方面，一个人的知识面不可能那么全面，因此极有可能会遇到自己不擅长的领域，从而导致面试失利，另一方面，遇上这种情况，面试的主动权就完全在面试官手里了，你只能被动地去回答。因此，简历上的展现就显得十分重要：你的简历就是面试官的地图，如果简历上十分空泛杂乱，那么面试官只好大范围地试探，如果简历上很具体，有针对性，那么面试官只需要按着简历上的内容，并结合部门的岗位要求来提问——因此写上简历的内容你必！须！熟！悉！
- 简历准备的几个要点：
  1. 不写对应聘该岗位没有太大帮助的内容（比如应聘后台开发，你写熟悉前端的东西就显得多余了）
  2. 力求简洁明了，简历不要超过一页！！
  3. 明确应聘岗位！
  4. 用数字or成果说话:
     + 能够摆出自己写过的C++项目，列出自己看过的经典书籍，比干巴巴写上“熟悉C++编程”之类的好过100倍； 
     + 能够摆出自己项目的性能测压数据，比写“项目的性能很高”之类的强过100倍； 
     + 能够砸出自己的绩点，排名，拿过的奖学金，比写“我的成绩优异”之类的好过1000倍！

*#* 对于面试的一些思考：

#+BEGIN_QUOTE
每次的面试机会都很宝贵，都是经历，要好好准备，并且在面试过后，进行 *复盘* ，可以找一个同学进行讨论或者跟自己心中模拟出来的人物进行对话，看看自己在刚结束的面试中有哪些地方做的不好的，哪些回答不正确的，对应知识点的掌握情况如何
#+END_QUOTE

- 同一个问题可以有不同的答法（语言组织方式、回答的详略程度、侧重点），如何才能给出让面试官满意的答案呢？
- 面试跟笔试最大的不同是，不同面试官有不同的喜好，问的问题不一样，而且遇上健谈的面试官和遇上不健谈的面试官差别也非常大，那么如何才能解决这个棘手的问题呢？
- 面试虽然变幻莫测，但是有一些问题提前准备好套路，总有能派上用场的时候，那么都有哪些套路呢？

经历了第一次失败，我花了一个星期的时间来反思，并进一步改进、准备——期间大幅度修改了简历、对面试的常见知识点进行了精炼和全面的再次复习、提前准备好一些台词（其实提前准备的作用就是让自己面试的时候更加自信，不因为紧张而出现“这个我明明会的，但是面试的时候就是紧张得想不起来了”的情况）。

*#* 面试心得：

我觉得并不像网上说的那样有那么多的技巧，我认为只有三个需要注意的点：
1. 经典的问题提前打好腹稿：比如进程和线程的区别，C++虚函数的实现，TCP三次握手，快速排序，你还有什么问题要问我的...提前打好腹稿是为了面试时不那么紧张，因为一紧张常常会答得毫无逻辑，而且不全面。而且这些出现概率接近80%的题目，你不提前准备，那就等着被虐吧。
2. 争取面试中的主动权，力求主导整场面试——回答要深入，主动展现自己：这一点我深有体会，第一次面试QQ音乐，面试官问了vector的实现，于是我回答： vector是动态分配连续空间的线性数组，当空间不够时扩充为2倍之类的...当时其实我是学习过了vector底层的空间适配器的，但是我没有往深里答，而是简单的回答了表面的东西，以为面试官会深入追问下去。但是！没有！后面很多问题都是这样，我不主动深入说，面试官也不深入问，于是白白失去了展示自己的机会。

   后面的面试，我吸取了教训，举几个例子。说一说select和epoll的区别。之前的话，我只会回答select的3个缺点和epoll的3个优点——但是这远远是不够的，并不能给面试官留下深刻的印象。

   于是我开始醒目了：我从select和epoll的运作原理来解释他们的区别吧...然后巴拉巴拉讲了select数据内核空间和用户空间的拷贝，讲了其套接字的遍历导致的效率问题...巴拉巴拉讲了epoll的红黑树，双向链表，回调机制。我相信如果你能从select和epoll的运作原理来解释两者的区别，而不是干巴巴地给出背住的结论，一定会让面试官刮目相看。

   另一个经典的例子：说一说TCP的三次握手吧！之前觉得，不就是三次握手吗，没有啥好讲的，于是几句话带过，后来师兄说，如果你说你熟悉TCP/IP，那么TCP三次握手和四次挥手的状态转换图要能熟练的画出来！于是面试中遇到这个问题，我会从哪一方发起主动连接，发送了什么类型的包，发送完毕后进入什么状态等等来详细解答。

   以上说的是回答自己熟悉的内容，如果遇上不熟悉的内容，应该如何应对：“不好意思，这方面我没有接触过（或者接触的不多）。”是的，遇到不懂的知识，勇敢地承认自己不会，千万不要不懂装懂！

   进一步的，可以引导面试官谈论自己熟悉的领域，比如面试官可能问B+树，你不是很熟悉，但是你对红黑树比较熟，那么你可以说：“B+树我不是很熟悉，不过我知道红黑树，不知道您有没有兴趣聊一聊。”这样子主动权就在你手上了！

   又或者，把自己思考的过程告诉面试官：我经常遇到的情况是，面试官问了一个问题，我不可能短时间内给出答复，于是先说“麻烦给我2分钟的时间思考一下”，两分钟后如果还没有结果，千万不要让面试官等，这个时候我会先把自己目前想到的都告诉面试官——即使不是很完善。

3. 表示出自己对加入他们很感兴趣：在面试之前，我都会去查找我应聘的部门的相关资料，当在面试的时候提到时，如果你表现出对他们部门有所了解，那么面试官会很高兴！最后一般面试官会问：“你还有什么要问的吗？”虽然面试官已经表示面试结束了，但是这个时候你们仍然在交谈，这也是表示自己对他们感兴趣的好时机，我一般会准备1到2个问题，不要太大太空，最好跟岗位或者部门有关。

总之，面试不是笔试，问什么问题，如何去评判回答的好坏，都是由面试官来决定，不同的面试官也许会截然不同，所以网络上的面经看看就好，最重要的是充分准备，学会沟通！

*#* 面试经历：

觉得这一次面试，前半部分主要考察你跟应聘的部门、岗位合不合适，后半部分其实很多问题都是开放性的，主要看你的逻辑思维以及产品思维（腾讯的技术人员是要有产品思维的！）

二面的面试题
#+BEGIN_QUOTE
你在广州读书对吧？ 
广州珠江那边有很多桥吧？ 
桥有多长啊？ 
桥上限速多少啊？ 
广州塞不塞车？ 
...
假定广州有足够多的车，且假定你说的桥长，限速是正确的，这座桥一天能通过多少辆车...
这座桥一天最多能通过多少辆车呢？（也就是不考虑高峰期。） 
长的桥一天内通过的车多，还是短的桥通过的车多？ 
建这座桥要考虑哪些因素？
... 
#+END_QUOTE

三面编程题，需要提前准备算法题和算法复习
#+BEGIN_QUOTE
1. 链表翻转——经典的题目，秒掉无压力； 
2. 编辑距离——算法课学过，动态规划，不过写出正确的代码还是需要一定时间； 
3. 左旋or右旋数组——要求至少给出两种做法，在《剑指offer》上看到其中一种做法
#+END_QUOTE

整个过程总的来说很顺利，没有面腾讯时的焦虑和紧张，可能是对腾讯的面试比较看重，而对阿里则是抱着试一试的心态，于是反而不会那么煎熬。而且面阿里的时候，已经有了面腾讯的经验，一切都准备的特别充分，虽然自己准备了很多内容在面腾讯的时候没有派上用场，但是在面阿里的时候用上了。

#+BEGIN_QUOTE
无目的的合目的性
#+END_QUOTE

*#* 关于准备：

1. 明确应聘的岗位和方向——至少要确定自己应聘什么语言的岗位，前端还是后台。
2. 找一家心仪的公司，看一看这家公司对该岗位的要求，同时参考其他公司类似岗位的要求。
3. 针对岗位要求，分清技能要求的侧重点，然后有针对性地去学习（我觉得最基本的是把该方向的经典书籍啃下来）。
4. 做一个拿得出手的项目（真的，一个就够了，应届生的项目经历不在多，而在于体现你在该方向上的学习）。

确定了C++后台开发岗，然后找了腾讯的岗位要求：
#+BEGIN_QUOTE
熟悉Unix/Linux操作系统，熟悉shell脚本或python，及后台服务程序开发调试； 
精通C++，熟悉面向对象开发方法，对设计模式有一定了解； 
熟悉TCP/IP协议相关知识，熟悉网络编程，熟悉HTTP等网络应用协议，熟悉多线程多进程开发； 
熟悉MYSQL数据库，熟悉其他NoSQL存储； 
对OpenCV和图像算法有相关开发经验优先。 
对Hadoop有了解者优先。
#+END_QUOTE

侧重点为：熟悉 Unix/Linux操作系统，C++，TCP/IP协议相关知识，网络编程，多进程开发，数据库；了解 shell脚本或python，设计模式，多线程开发，Hadoop。

*#* 各个方面的学习书单：

- Linux入门：《鸟哥的Linux私房菜—基础篇》（必读），《鸟哥的Linux私房菜—服务器架设篇》（选读）
- Linux环境编程：《UNIX环境高级编程》、《Unix/Linux编程实践教程》 （第一本简称APUE，十分经典，但是内容也特别多，适合做工具书，里面的内容可以选择性地阅读；第二本的知识点安排跟APUE挺吻合的，并且有大量实践教程，虽然书中有挺多错漏，但是仍然推荐作为配合APUE一起学习的书籍。也就是说，我建议这两本书同步看）
- C++：《C++ Primer》（能够静心读下来不容易）、《Effective C++》（很有用的一些条款，针对面试可以选读）
- TCP/IP协议和网络编程：《TCP/IP协议详解》（必读）、《UNIX网络编程卷1》（必读），《UNIX网络编程卷2》（主要讲进程间通信，可选读）
- 算法与数据结构：《算法导论》（从大一开始陆陆续续看，那时觉得很难，现在回过头来再看，惊叹万分，有醍醐灌顶的感觉）、《STL源码剖析》（绝对值得一看，前半部分必看，后半部分选读）
- 脚本：《python基础教程》
- 设计模式：《大话设计模式》，程杰 著（适合入门），《Design Patterns: Elements of Reusable Object-Oriented Software》（设计模式），作者： Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides（经典书籍，但是比较难懂）
- 数据库：数据库原理要懂，之后可以了解mysql，memcached，redis等等。
- 刷题：《剑指offer》、leetcode（网站）

以上列出的书，大多是经典的书，口碑一流，但是“厚重”使得学起来有一定困难，所以一定要配合实践，并且根据自己的情况选择性阅读。

- 项目：跟应聘岗位有关，在精不在多。
- 最宝贵的资源：源码和博客。

  阅读优秀的源码能够学到很多东西，而阅读源码、书籍时可能会遇到困难，这个时候去看看相关博客会有很大帮助，当然，如果能够自己也写一写博客那就更好了。

  我的学习方法是：一边看书，一边写博客——这是一个把书读薄的过程，在后面的复习中，我就以自己博客的知识为主来复习了，然后原书作为参考。一边看书，一边打代码——没有代码，大多数情况下看了就忘的。

